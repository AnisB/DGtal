/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

#pragma once

/**
 * @file Flower3D.ih
 * @author Anis Benyoub (\c anis.benyoub@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2012/06/05
 *
 * Header file for module Flower3D.cpp
 *
 * This file is part of the DGtal library.
 */


//////////////////////////////////////////////////////////////////////////////
#include <cstdlib>

//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------
    typedef  pair<double,double> AngularCoordinates;
/**
 * Destructor.
 */
template <typename T>
inline
DGtal::Flower3D<T>::~Flower3D()
{
}

template <typename T>
inline
DGtal::Flower3D<T>::Flower3D( const double x0, const double y0, const double  z0, const double r, 
				const double smallr, const double k,const double phi  ):
  myRadius(r), myCenter(x0,y0,z0),mySmallR(smallr),myK(k),myPhi(phi)
{}


template <typename T>
inline
DGtal::Flower3D<T>::Flower3D(const RealPoint &aPoint,const double r, const double smallr, const double k,const double phi  ):
  myRadius(r), myCenter(aPoint),mySmallR(smallr),myK(k),myPhi(phi) 
{}


/////////////////////////////////////////////////////////////////////////////
// ------------- Implementation of 'StarShaped' services ------------------

/**
 * @param p any point in the plane.
 *
 * @return the  couple of angle parameters (Teta,Phi) respectivly between [-Pi/2,Pi/2) and [-Pi,Pi] corresponding to
 * this point for the shape.
 */
template <typename T>
inline
AngularCoordinates
DGtal::Flower3D<T>::parameter( const RealPoint & pp ) const
{
  RealPoint l( pp );
  l -= myCenter;
  AngularCoordinates angle ; 
  
  
  
  if((fabs(l[0])<0.0001)&&(fabs(l[1])<0.0001))
  {
    angle.first=0;
    if(l[2]>=0)
    angle.second=0;
    if(l[2]<0)
    angle.second=M_PI;
  }
  else
  {
  angle.first=atan(l[1]/l[0]);
  if(l[0]>=0)
  angle.second=asin(sqrt(l[2]*l[2])/sqrt(l[1]*l[1]+l[0]*l[0]+l[2]*l[2]));
  if(l[0]<0)
  angle.second=-asin(sqrt(l[2]*l[2])/sqrt(l[1]*l[1]+l[0]*l[0]+l[2]*l[2]));
  }
  return angle;
}

/**
 * @param t any angle between 0 and 2*Pi.
 *
 * @return the vector (x(t),y(t),z(t)) which is the position on the
 * shape boundary.
 */
template <typename T>
inline
typename DGtal::Flower3D<T>::RealPoint 
DGtal::Flower3D<T>::x( AngularCoordinates t ) const
{

  double r= myRadius+ mySmallR*cos(2*myK*t.first+myPhi)*cos(myK*t.second+myPhi);


  RealPoint c( r*cos(t.first)*cos(t.second), r*sin(t.first)*cos(t.second) , r*sin(t.second));
  c += myCenter;
  return c;
}



/**
* @param t is a couple of Teta && Phi wich are  angles respectivly betweend [-Pi/2,Pi/2) and [-Pi,Pi].
*
* @return the vector (gradf(M)).
*/
template <typename T>
inline
typename DGtal::Flower3D<T>::RealPoint 
DGtal::Flower3D<T>::gradient( const AngularCoordinates t) const 
{
  RealPoint p= x(t);
  double x=2*(p[0]-myCenter[0]);
  double y =2*(p[1]-myCenter[1]);
  double z=2*(p[2]-myCenter[2]);
  return RealPoint(x,y,z);
}

/**
* @param t is a couple of Teta && Phi wich are  angles respectivly betweend [-Pi/2,Pi/2) and [-Pi,Pi].
*
* @return the vector (rt(M)) wich is the first partial derivative with respect to Teta.
*/
template <typename T>
inline
typename DGtal::Flower3D<T>::RealPoint 
DGtal::Flower3D<T>::rt( const AngularCoordinates t) const 
{

	double r= myRadius+ mySmallR*cos(myK*t.first+myPhi)*cos(myK*t.second+myPhi);

	double ru= -myK*mySmallR*sin(myK*t.first+myPhi)*cos(myK*t.second+myPhi);


	return RealPoint( ru*cos(t.first)*cos(t.second)-r*sin(t.first)*cos(t.second),
			  ru*sin(t.first)*cos(t.second)+r*cos(t.first)*cos(t.second),
			  ru*sin(t.second));
}



/**
* @param t is a couple of Teta && Phi wich are  angles respectivly betweend [-Pi/2,Pi/2) and [-Pi,Pi].
*
* @return the vector (rp(M)) wich is the first partial derivative with respect to Phi.
*/
template <typename T>
inline
typename DGtal::Flower3D<T>::RealPoint 
DGtal::Flower3D<T>::rp( const AngularCoordinates t) const 
{
   double r= myRadius+ mySmallR*cos(myK*t.first+myPhi)*cos(myK*t.second+myPhi);

   double rv= -myK*mySmallR*cos(myK*t.first+myPhi)*sin(myK*t.second+myPhi);


   return RealPoint(rv*cos(t.first)*cos(t.second)-r*cos(t.first)*sin(t.second),
		    rv*sin(t.first)*cos(t.second)-r*sin(t.first)*sin(t.second),
			rv*sin(t.second)+ r*cos(t.second));
}


/**
* @param t is a couple of Teta && Phi wich are  angles respectivly betweend [-Pi/2,Pi/2) and [-Pi,Pi].
*
* @return the vector (rtt(M)) wich is second the second partial derivative with respect to Teta(twice).
*/
template <typename T>
inline
typename DGtal::Flower3D<T>::RealPoint 
DGtal::Flower3D<T>::rtt( const AngularCoordinates t) const 
{
  double r= myRadius+ mySmallR*cos(myK*t.first+myPhi)*cos(myK*t.second+myPhi);

  double ru= -myK*mySmallR*sin(myK*t.first+myPhi)*cos(myK*t.second+myPhi);

  double ruu= -myK*myK*mySmallR*cos(myK*t.first+myPhi)*cos(myK*t.second+myPhi);


  return RealPoint( ruu*cos(t.first)*cos(t.second)-ru*sin(t.first)*cos(t.second)-ru*sin(t.first)*cos(t.second)-r*cos(t.first)*cos(t.second),
		    ruu*sin(t.first)*cos(t.second)+ru*cos(t.first)*cos(t.second)+ru*cos(t.first)*cos(t.second)-r*sin(t.first)*cos(t.second),
		    ruu*sin(t.second));
}



/**
* @param t is a couple of Teta && Phi wich are  angles respectivly betweend [-Pi/2,Pi/2) and [-Pi,Pi].
*
* @return the vector (rpp(M)) wich is second the partial derivatif with respect to Phi(twice).
*/
template <typename T>
inline
typename DGtal::Flower3D<T>::RealPoint 
DGtal::Flower3D<T>::rpp( const AngularCoordinates t) const 
{
   double r= myRadius+ mySmallR*cos(myK*t.first+myPhi)*cos(myK*t.second+myPhi);

   double rv= -myK*mySmallR*cos(myK*t.first+myPhi)*sin(myK*t.second+myPhi);

   double rvv= -myK*myK*mySmallR*cos(myK*t.first+myPhi)*cos(myK*t.second+myPhi);
   return RealPoint(rvv*cos(t.first)*cos(t.second)-rv*cos(t.first)*sin(t.second)-rv*cos(t.first)*sin(t.second)-r*cos(t.first)*cos(t.second),
		    rvv*sin(t.first)*cos(t.second)-rv*sin(t.first)*sin(t.second)-rv*sin(t.first)*sin(t.second)-r*sin(t.first)*cos(t.second),
			rvv*sin(t.second)+rv*cos(t.second)+ rv*cos(t.second)- r*sin(t.second));
 
}
    
/**
* @param t is a couple of Teta && Phi wich are  angles respectivly betweend [-Pi/2,Pi/2) and [-Pi,Pi]
*
* @return the vector (rtp(M)) wich is second the partial derivatif with respect to Teta then Phi.
*/
template <typename T>
inline
typename DGtal::Flower3D<T>::RealPoint 
DGtal::Flower3D<T>::rtp( const AngularCoordinates t) const 
{

  double r= myRadius+ mySmallR*cos(myK*t.first+myPhi)*cos(myK*t.second+myPhi);
  double ru= -myK*mySmallR*sin(myK*t.first+myPhi)*cos(myK*t.second+myPhi);
  double rv= -myK*mySmallR*cos(myK*t.first+myPhi)*sin(myK*t.second+myPhi);
  double ruv= myK*myK*mySmallR*sin(myK*t.first+myPhi)*sin(myK*t.second+myPhi);


return RealPoint( ruv*cos(t.first)*cos(t.second)-ru*cos(t.first)*sin(t.second)-rv*sin(t.first)*cos(t.second)+r*sin(t.first)*sin(t.second),
		  ruv*sin(t.first)*cos(t.second)-ru*sin(t.first)*sin(t.second)+rv*cos(t.first)*cos(t.second)-r*cos(t.first)*sin(t.second),
		  ruv*sin(t.second)+ru*cos(t.second));
}
    

    
    
///////////////////////////////////////////////////////////////////////////////
// Interface - public :

/**
 * Writes/Displays the object on an output stream.
 * @param out the output stream where the object is written.
 */
template <typename T>
inline
void
DGtal::Flower3D<T>::selfDisplay ( std::ostream & out ) const
{
  out << "[Flower3D] center= "<<myCenter<<" radius="<<myRadius;
}

/**
 * Checks the validity/consistency of the object.
 * @return 'true' if the object is valid, 'false' otherwise.
 */
template <typename T>
inline
bool
DGtal::Flower3D<T>::isValid() const
{
    return true;
}





///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename T>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
      const Flower3D<T> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


